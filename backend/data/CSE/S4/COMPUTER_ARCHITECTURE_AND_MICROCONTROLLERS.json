{
  "metadata": {
    "created": "2025-05-08T10:11:35.539446",
    "last_modified": "2025-05-08T10:29:57.039750",
    "version": "1.0",
    "author": "",
    "department": "ECE",
    "semester": "Semester 4",
    "subject": "COMPUTER ARCHITECTURE AND MICROCONTROLLERS*",
    "schema_id": "17fd7177-045c-4104-b397-7c806ddc46dc"
  },
  "content": {
    "modules": [
      {
        "module_id": "36d77cc1-9c25-43ad-bf75-000296e79576",
        "module_number": 1,
        "module_title": "Computer Arithmetic and Processor Basics",
        "description": "",
        "status": "draft",
        "created": "2025-05-08T10:12:26.637963",
        "last_modified": "2025-05-08T10:27:19.628509",
        "topics": [
          {
            "topic_id": "879ddeeb-28f4-43c8-9837-0374aae44235",
            "topic_title": "RISC AND CISC ARCHITECTURES",
            "content": {
              "text": "\nThe dominant architecture in the PC market belongs to the Complex Instruction Set Computer\n(CISC) design. The obvious reason for this classification is the \u201ccomplex\u201d nature of its\nInstruction Set Architecture (ISA). The motivation for designing such complex instruction sets\nis to provide an instruction set that closely supports the operations and data structures used by\nHigher-Level Languages (HLLs). However, the side effects of this design effort are far too\nserious to ignore.",
              "diagrams": [],
              "equations": [],
              "examples": [],
              "references": []
            },
            "status": "draft",
            "created": "2025-05-08T10:13:20.827042",
            "last_modified": "2025-05-08T10:27:19.628509",
            "subtopics": [
              {
                "subtopic_id": "296736b3-0c00-4b94-8d99-9308b4c55631",
                "subtopic_title": "Addressing Modes in CISC",
                "content": {
                  "text": "\nThe decision of CISC processor designers to provide a variety of addressing modes leads to\nvariable-length instructions. For example, instruction length increases if an operand is in\nmemory as opposed to in a register.\n\uf076 This is because we have to specify the memory address as part of instruction encoding,\nwhich takes many more bits.\n\uf076 This complicates instruction decoding and scheduling. The side effect of providing a\nwide range of instruction types is that the number of clocks required to execute\ninstructions varies widely.\n",
                  "diagrams": [],
                  "equations": [],
                  "examples": [],
                  "references": []
                },
                "status": "draft",
                "created": "2025-05-08T10:14:06.000036",
                "last_modified": "2025-05-08T10:27:19.628509"
              },
              {
                "subtopic_id": "80510574-b12a-496e-b8eb-7c228a482a90",
                "subtopic_title": "Evolution of RISC",
                "content": {
                  "text": "\nFor these and other reasons, in the early 1980s designers started looking at simple ISAs.\nBecause these ISAs tend to produce instruction sets with far fewer instructions, they coined the\nterm Reduced Instruction Set Computer (RISC). Even though the main goal was not to reduce\nthe number of instructions, but the complexity, the term has stuck.\nThere is no precise definition of what constitutes a RISC design. However, we can identify\ncertain characteristics that are present in most RISC systems.\n\uf076 We identify these RISC design principles after looking at why the designers took the\nroute of CISC in the first place.\n\uf076 Because CISC and RISC have their advantages and disadvantages, modern processors\ntake features from both classes. For example, the PowerPC, which follows the RISC\nphilosophy, has quite a few complex instructions.",
                  "diagrams": [],
                  "equations": [],
                  "examples": [],
                  "references": []
                },
                "status": "draft",
                "created": "2025-05-08T10:15:19.114341",
                "last_modified": "2025-05-08T10:15:19.114341"
              }
            ]
          }
        ]
      }
    ]
  }
}